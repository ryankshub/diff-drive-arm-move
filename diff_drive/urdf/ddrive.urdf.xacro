<?xml version="1.0"?>
<!-- Xacro file for 2-wheeled cart with caster known as madbot-->
<robot name="madbot" xmlns:xacro="https://www.ros.org/wiki/xacro">
    <!-- Get properties from madbot_dim.yaml configuration -->
    <xacro:property name="madbot_yaml_file" value="$(find diff_drive)/config/madbot_dim.yaml"/>
    <xacro:property name="madbot_dims" value="${load_yaml(madbot_yaml_file)}"/>
    <!-- Properties from madbot_dim.yaml -->
    <xacro:property name="ddrive_dict" value="${madbot_dims['ddrive']}"/>
    <xacro:property name="rect_prism_dict" value="${ddrive_dict['rect_prism']}"/>
    <xacro:property name="rect_length" value="${rect_prism_dict['x_len']}"/>
    <xacro:property name="rect_width" value="${rect_prism_dict['y_len']}"/>
    <xacro:property name="rect_height" value="${rect_prism_dict['z_len']}"/>
    <xacro:property name="wheel_dict" value="${ddrive_dict['wheel']}"/>
    <xacro:property name="wheel_radius" value="${wheel_dict['radius']}"/>
    <xacro:property name="wheel_length" value="${wheel_dict['length']}"/>
    <xacro:property name="caster_dict" value="${ddrive_dict['caster']}"/>
    <xacro:property name="caster_radius" value="${caster_dict['radius']}"/>
    <!-- Import all Gazebo-customization elements, including Gazebo colors -->
    <xacro:include filename="$(find diff_drive)/urdf/ddrive.gazebo"/>
    
    <!-- Links -->
    <link name="rect_box">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${rect_length} ${rect_width} ${rect_height}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${rect_length} ${rect_width} ${rect_height}"/>
            </geometry>
        </collision>

        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="1"/>
            <inertia ixx="${(1.0/3.0)*(rect_length**2 + rect_height**2)}"
                    ixy="${(1.0/4.0)*rect_width*rect_length}"
                    ixz="${(1.0/4.0)*rect_height*rect_width}"
                    iyy="${(1.0/3.0)*(rect_width**2 + rect_height**2)}"
                    iyz="${(1.0/4.0)*rect_height*rect_length}"
                    izz="${(1.0/3.0)*(rect_length**2 + rect_width**2)}"/>
        </inertial>
    </link>

    <link name="top_caster">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
            </geometry>
        </collision>

        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value=".1"/>
            <inertia ixx="${(2.0/5.0)*(.1)*(caster_radius**2)}"
                    ixy="0"
                    ixz="0"
                    iyy="${(2.0/5.0)*(.1)*(caster_radius**2)}"
                    iyz="0"
                    izz="${(2.0/5.0)*(.1)*(caster_radius**2)}"/>
        </inertial>
    </link>

    <link name="bottom_caster">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
            </geometry>
        </collision>

        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value=".1"/>
            <inertia ixx="${(2.0/5.0)*(.1)*(caster_radius**2)}"
                    ixy="0"
                    ixz="0"
                    iyy="${(2.0/5.0)*(.1)*(caster_radius**2)}"
                    iyz="0"
                    izz="${(2.0/5.0)*(.1)*(caster_radius**2)}"/>
        </inertial>
    </link>

    <link name="left_wheel">
        <visual>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder length="${wheel_length}" radius="${wheel_radius}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder length="${wheel_length}" radius="${wheel_radius}"/>
            </geometry>
        </collision>

        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="10"/>
            <inertia ixx="${((1.0/12.0)*(.5)*(3.0*wheel_radius**2 + wheel_length))}"
                    ixy="0"
                    ixz="0"
                    iyy="${((1.0/12.0)*(.5)*(3.0*wheel_radius**2 + wheel_length))}"
                    iyz="0"
                    izz="${(1.0/2.0)*(.5)*(wheel_radius**2)}"/>
        </inertial>
    </link>

    <link name="right_wheel">
        <visual>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder length="${wheel_length}" radius="${wheel_radius}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder length="${wheel_length}" radius="${wheel_radius}"/>
            </geometry>
        </collision>

        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="10"/>
            <inertia ixx="${((1.0/12.0)*(.5)*(3.0*wheel_radius**2 + wheel_length))}"
                    ixy="0"
                    ixz="0"
                    iyy="${((1.0/12.0)*(.5)*(3.0*wheel_radius**2 + wheel_length))}"
                    iyz="0"
                    izz="${(1.0/2.0)*(.5)*(wheel_radius**2)}"/>
        </inertial>
    </link>

    <!--Joints-->
    <joint name="top_caster_bolt" type="fixed">
        <parent link="rect_box"/>
        <child link="top_caster"/>
        <origin xyz="${(1.0/3.0)*rect_length} 0 ${(1.0/2.0)*rect_height}"/>
    </joint>

    <joint name="bottom_caster_bolt" type="fixed">
        <parent link="rect_box"/>
        <child link="bottom_caster"/>
        <origin xyz="${(1.0/3.0)*rect_length} 0 ${-(1.0/2.0)*rect_height}"/>
    </joint>

    <joint name="left_drive" type="continuous">
        <parent link="rect_box"/>
        <child link="left_wheel"/>
        <origin xyz="${-(1.0/3.0)*rect_length} ${-(1.0/2.0)*(rect_width + wheel_length)} 0"/>
        <axis xyz="0 1 0"/>
    </joint>

    <joint name="right_drive" type="continuous">
        <parent link="rect_box"/>
        <child link="right_wheel"/>
        <origin xyz="${-(1.0/3.0)*rect_length} ${(1.0/2.0)*(rect_width + wheel_length)} 0"/>
        <axis xyz="0 1 0"/>
    </joint>
</robot>