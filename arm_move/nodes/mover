#!/usr/bin/env python3
# Mover Node
# RKS

# Project imports
from arm_move.srv import PxKinStep
from arm_move.srv import SimpleBool, SimpleBoolResponse
from arm_move.srv import ResetBox, ResetBoxResponse
# Python imports
import sys
from enum import Enum
from collections import deque
# 3rd-party imports
import geometry_msgs.msg as geomsgs
import moveit_commander
import numpy as np
import rospy
import tf_conversions


class State(Enum):
    """
    State of the control loop. 
    REST ~ the robot is not moving
    EXEC_MOVE ~ the robot is executing a single move
    EXEC_PLAN ~ the robot is executing a plan
    """
    REST = 0
    EXEC_MOVE = 1
    EXEC_PLAN = 2


class Mover:
    """
    ROS Node responsible for 

    SERVICES:
        + reset ResetBox ~ 

        + step PxKinStep ~

        + follow SimpleBool ~
    
    PARAMS:
        + list(x,y,z,bool) waypoints ~ a list of 3D waypoints where the bool
            at the end is true if the gripper should be opened, false if the
            gripper should be closed
    """
    def __init__(self):
        """
        Constructor of ROS Node Mover class. Creates all 3 of 
        the services, initializes node and moveit_commander, and sets up
        all internal varibles

        Public members
        list waypoints: Points of (x,y,z,bool) which represent the end-effector 
        position and gripper state. Note: This function will filter any initial 
        waypoint that is not reachable by the robot. 
        """
        # init moveit_commander and node
        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node("mover")
        # params for class
        self.waypoints = rospy.get_param("/px100/arm_move/waypoints", [])
        self._box_name = "realsense"
        self._table_name = "table"
        # moveit_objects
        group_name = "interbotix_arm"
        gripper_name = "interbotix_gripper"
        self._robot = moveit_commander.RobotCommander()
        self._scene = moveit_commander.PlanningSceneInterface() # THIS IS BLOODY BLOCKING FUNCTION
        self._move_group = moveit_commander.MoveGroupCommander(group_name)
        self._gripper_group = moveit_commander.MoveGroupCommander(gripper_name)
        # Sleep to let visualization or gazebo finish init
        rospy.sleep(3)
        # Build box table
        self._add_table()
        # Build realsense box
        self._add_realsense_box()
        # ROS services
        self._reset_service = rospy.Service('reset', ResetBox, self._handle_reset_service)
        self._step_service = rospy.Service('step', PxKinStep, self._handle_step_service)
        self._follow_service = rospy.Service('follow', SimpleBool, self._handle_follow_service)
        # Filter waypoints
        self.waypoints = self._filter_waypoints(self.waypoints)
        # Indicate node is active to user
        # We have a lot of things going one and this msg is 
        # generally pretty helpful in case of any 
        # moveit_commander shenangians. 
        rospy.loginfo("Node mover is ACTIVE")

        # Start State and state objects
        self._state = State.REST
        self._wpt_queue = None
        self._cycle = False
        self._rotation_counter = 0

        #init node
        self._RATE = 5 # in Hz
        self._time_delta = 1./self._RATE
        rospy.Timer(rospy.Duration(self._time_delta), self.main_loop)
        rospy.spin()


    def _add_table(self):
        """
        Add table to rviz visualizations

        Mods:
            Adds a box (table) to planning_scene_interface
        """
        # Build box table
        TABLE_LENGTH_m = 1.5
        TABLE_WIDTH_m = 1.5
        TABLE_HEIGHT_m = 0.2
        table_pose = geomsgs.PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.z = -(.5)*TABLE_HEIGHT_m
        quads = tf_conversions.transformations.quaternion_from_euler(0,0,0)
        table_pose.pose.orientation.x = quads[0]
        table_pose.pose.orientation.y = quads[1]
        table_pose.pose.orientation.z = quads[2]
        table_pose.pose.orientation.w = quads[3]
        table_size = (TABLE_LENGTH_m, TABLE_WIDTH_m, TABLE_HEIGHT_m)
        self._scene.add_box(self._table_name, table_pose, size=table_size)
        self._wait_for_update(self._table_name, name_is_known=True)


    #TODO: This should be parsed from worlds file
    def _add_realsense_box(self, xyz=None, rpy=None):
        """
        Add realsense_box to rviz visualizations

        Args:
            tuple xyz: default=None
                The position for the center of the box. If no position
                is provided, the box is placed at coordinates:
                    x: 0.23
                    y: 0.0
                    z: half of the box's height
            tuple rpy: default None
                The orientation of the box. If no orientation is provided,
                the orientation is set at:
                    roll: 0, pitch: 0, yaw: 0
        Mods:
            Adds a box to planning_scene_interface
        """
        # Realsense box
        BOX_LENTH_m = 0.14
        BOX_WIDTH_m = 0.09
        BOX_HEIGHT_m = 0.05
        box_pose = geomsgs.PoseStamped()
        box_pose.header.frame_id = "world"
        # Handle position of box
        if xyz is not None:
            box_pose.pose.position.x = xyz[0]
            box_pose.pose.position.y = xyz[1]
            #Handle zed case
            if xyz[2] == 0:
                box_pose.pose.position.z = .5*BOX_HEIGHT_m
            else:
                box_pose.pose.position.z = xyz[2]
        else:
            #Initial position from gazebo world
            box_pose.pose.position.x = 0.23
            box_pose.pose.position.y = 0.0
            box_pose.pose.position.z = .5*BOX_HEIGHT_m
        
        # Handle orientation of box
        quads = None
        if rpy is not None:
            quads = tf_conversions.transformations.quaternion_from_euler(
                rpy[0],rpy[1],rpy[2])
        else:
            quads = tf_conversions.transformations.quaternion_from_euler(0,0,np.pi/2)
        box_pose.pose.orientation.x = quads[0]
        box_pose.pose.orientation.y = quads[1]
        box_pose.pose.orientation.z = quads[2]
        box_pose.pose.orientation.w = quads[3]

        #Name and size of the box
        box_size = (BOX_LENTH_m, BOX_WIDTH_m, BOX_HEIGHT_m)
        self._scene.add_box(self._box_name, box_pose, size=box_size)
        self._wait_for_update(self._box_name, name_is_known=True)


    def _filter_waypoints(self, wpt_list):
        """
        Filters out any invalid waypoints from the waypoint list provided.
        An invalid waypoint satisfies 1 of the following conditions:
            1. The fourth element of the waypoint, representing gripper state,
                is not a boolean
            2. The x, y, z of the waypoint is unreachable for the robot
        
        Args:
            list[x,y,z,bool] wpt_list: 
                A list of 4-elem collections that contain:
                    - The x, y, z position of the end effector
                    - The state of the gripper at that point(true = open)
        
        Rtns:
            list[x,y,z,bool] filtered_wpts:
                A list of 4-elem points that all valid
        """
        filtered_wpts = []
        for point in wpt_list:
            if not isinstance(point[3], bool):
                rospy.logwarn(f"Waypoint {point} 4th element should be a bool")
                rospy.logwarn(f"Waypoint removed from waypoint list")
                continue
            wpt_xyz = (point[0], point[1], point[2])
            self._move_group.set_position_target(wpt_xyz)
            success, _, _, _ = self._move_group.plan()
            self._move_group.clear_pose_targets()
            if not success:
                rospy.logwarn(f"Waypoint {point} end effector is unreachable")
                rospy.logwarn(f"Waypoint removed from waypoint list")
                continue
            filtered_wpts.append(point)
        return filtered_wpts


    def _handle_follow_service(self, req):
        # Stop robot motion
        self._state = State.REST
        self._move_group.stop()

        self._cycle = req.cycle
        self._wpt_queue = deque(self.waypoints)
        self._state = State.EXEC_PLAN
        return SimpleBoolResponse()


    def _handle_reset_service(self, req):
        # Stop robot motion
        self._state = State.REST
        self._move_group.stop()

        # Set new point for box
        new_xyz = (req.x, req.y, req.z)
        new_rpy = (req.roll, req.pitch, req.yaw)
        zero_xyz = all(v == 0 for v in new_xyz)
        zero_rpy = all(v == 0 for v in new_rpy)
        if not zero_xyz or not zero_rpy:
            #Box has new position
            self._scene.remove_world_object(name=self._box_name)
            self._add_realsense_box(xyz=new_xyz, rpy=new_rpy)
        # Set Robot to Home position
        self._move_group.set_named_target('Home')
        # Check if to clear waypoints
        if req.clear:
            self.waypoints = []
        # Update State
        self._state = State.EXEC_MOVE
        return ResetBoxResponse()

    
    def _handle_step_service(self, req):
        # Stop robot motion
        self._state = State.REST
        self._move_group.stop()
        # Read request
        pose_xyz = (req.x, req.y, req.z)
        self._move_group.set_position_target(pose_xyz)
        
        success, _, _, err_code = self._move_group.plan()

        if success:
            # If reachable, set gripper first, then move
            # Add waypoint
            self.waypoints.append([req.x, req.y, req.z, req.open])
            # Add gripper target
            if req.open:
                self._gripper_group.set_named_target('Open')
            else:
                self._gripper_group.set_named_target('Closed')
            # Add plan for state execution
            self._state = State.EXEC_MOVE

        return err_code

     
    def _wait_for_update(self, name, name_is_known=False, name_is_attached=False, timeout=3):
        start = rospy.get_time()
        seconds = rospy.get_time()
        while(seconds - start < timeout) and not rospy.is_shutdown():
            # Check if objects are in attached objects
            attached_objects = self._scene.get_attached_objects([name])
            is_attached = len(attached_objects.keys()) > 0

            #Test new objects are in the scene
            is_known = name in self._scene.get_known_object_names()

            #Test if object match state
            if (name_is_known == is_known and name_is_attached == is_attached):
                return True

            rospy.sleep(0.1)
            seconds = rospy.get_time()
        
        #Exited while loop without returning
        return False


    def main_loop(self, event):
        """
        Main execution loop of mover node

        Args:
            event: A rospy.Timer event
        """
        # Robot is not moving
        if self._state == State.REST:
            # Robot is taking a load off
            # Clear the state machine varibles
            # This is redundant, but just here for safety
            self._wpt_queue = None

        # Robot should execute go motion
        elif self._state == State.EXEC_MOVE:
            # For 'reset' and 'step' calls
            self._gripper_group.go(wait=True)
            self._gripper_group.stop()
            self._gripper_group.clear_pose_targets()
            self._move_group.go(wait=True)
            self._move_group.stop()
            self._move_group.clear_pose_targets()
            self._state = State.REST

        # Robot should exection plan
        elif self._state == State.EXEC_PLAN:
            # for 'follow' service call
            # Set rotation counter
            self._rotation_counter = 0
            # follow path
            if len(self._wpt_queue) > 0:
                while True:
                    # Get target
                    target_pt = self._wpt_queue[0]
                    # Get xyz and gripper position bool
                    target_xyz = (target_pt[0], target_pt[1], target_pt[2])
                    target_grip = target_pt[3]
                    # Set targets
                    self._move_group.set_position_target(target_xyz)
                    if target_grip:
                        self._gripper_group.set_named_target('Open')
                    else:
                        self._gripper_group.set_named_target('Closed')
                    # Gripper cmd first
                    self._gripper_group.go(wait=True)
                    self._gripper_group.stop()
                    self._gripper_group.clear_pose_targets()
                    # Movement cmd next
                    self._move_group.go(wait=True)
                    self._move_group.stop()
                    self._move_group.clear_pose_targets()
                    # Update queue for target
                    self._wpt_queue.rotate(-1)
                    self._rotation_counter += 1
                    # Check for kill conditions
                    # If we are not in EXEC_PLAN: break loop
                    if self._state != State.EXEC_PLAN:
                        break
                    elif (self._rotation_counter % len(self._wpt_queue)) == 0 and not self._cycle:
                        # We only follow the path once
                        self._state = State.REST
                        break 
            # If no path, just rest
            else:
                self._state = State.REST

        # Something has gone horribly and this node should die    
        else: 
            rospy.signal_shutdown("Mover node has entered undefined state")
            exit(1)


#Activate 'mover' node for Reactive node
def main():
    """
    Main execution loop for mover node
    """
    mover = Mover()
    rospy.spin()


# Main Execution loop
if __name__ == "__main__":
    try:
        main()
    #If something kills this node, have it die
    except rospy.ROSInterruptException:
        pass
